// <auto-generated />
using System;
using FijiMed.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FijiMed.Web.API.Migrations
{
    [DbContext(typeof(FijiMedContext))]
    partial class FijiMedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FijiMed.Data.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PrescriberNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProviderNumber")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ItemDescription");

                    b.Property<int>("MedicineTypeId");

                    b.Property<string>("ReaderNo");

                    b.Property<string>("Unit");

                    b.Property<int>("Volume");

                    b.HasKey("MedicineId");

                    b.HasIndex("MedicineTypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.MedicineType", b =>
                {
                    b.Property<int>("MedicineTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeName");

                    b.HasKey("MedicineTypeId");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressStreet");

                    b.Property<string>("Bag");

                    b.Property<string>("CardFirstName");

                    b.Property<string>("CardLastName");

                    b.Property<string>("ConcessionNumber");

                    b.Property<string>("ConcessionReportType");

                    b.Property<string>("ConcessionType");

                    b.Property<string>("ConcessionTypeNo");

                    b.Property<int>("ConcessionValidToMonth");

                    b.Property<int>("ConcessionValidToYear");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("DiscountingPref");

                    b.Property<string>("FirstName");

                    b.Property<string>("IHI");

                    b.Property<bool>("IsCTGRegistered");

                    b.Property<bool>("IsConcession");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsFamilyIncl");

                    b.Property<bool>("IsMedicareEnquiry");

                    b.Property<bool>("IsMyHRConsent");

                    b.Property<bool>("IseRxConsent");

                    b.Property<string>("LastName");

                    b.Property<string>("MedicareCardNo");

                    b.Property<int>("MedicareCardValidToMonth");

                    b.Property<int>("MedicareCardValidToYear");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("Postcode");

                    b.Property<string>("SafetyNetEntitlementNo");

                    b.Property<string>("Sex");

                    b.Property<string>("Suburb");

                    b.Property<string>("Title");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.PatientAlergy", b =>
                {
                    b.Property<int>("PatientAlergyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlergyCondition");

                    b.Property<int>("PatientId");

                    b.HasKey("PatientAlergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAlergies");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.PatientNote", b =>
                {
                    b.Property<int>("PatientNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("NoteDate");

                    b.Property<string>("NoteText");

                    b.Property<int>("PatientId");

                    b.Property<int>("UserId");

                    b.HasKey("PatientNoteId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PermissionName");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Script", b =>
                {
                    b.Property<int>("ScriptId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<string>("HospitalProviderNumber");

                    b.Property<int>("PatientId");

                    b.Property<string>("ProviderNumber");

                    b.Property<DateTime>("ScriptDate");

                    b.Property<string>("ScriptType");

                    b.HasKey("ScriptId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptMedicine", b =>
                {
                    b.Property<int>("ScriptMedicineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Directions");

                    b.Property<int>("MedicineId");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int>("Repeats");

                    b.Property<int>("ScriptId");

                    b.HasKey("ScriptMedicineId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptMedicine");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptNote", b =>
                {
                    b.Property<int>("ScriptNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Notes");

                    b.Property<int>("ScriptId");

                    b.HasKey("ScriptNoteId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptNote");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptWarning", b =>
                {
                    b.Property<int>("ScriptWarningId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ScriptId");

                    b.Property<string>("WarningTitle");

                    b.HasKey("ScriptWarningId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptWarning");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptWarningDetail", b =>
                {
                    b.Property<int>("ScriptWarningDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LTD");

                    b.Property<string>("STG");

                    b.Property<int>("ScriptWarningId");

                    b.Property<string>("Warning");

                    b.HasKey("ScriptWarningDetailId");

                    b.HasIndex("ScriptWarningId");

                    b.ToTable("ScriptWarningDetails");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("UserRoleId");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.UserPermission", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PermissionId");

                    b.Property<int>("UserId");

                    b.HasKey("UserPermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserRoleName");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.UserRolePermission", b =>
                {
                    b.Property<int>("UserRolePermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PermissionId");

                    b.Property<int>("UserRoleId");

                    b.HasKey("UserRolePermissionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermission");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.Property<int>("ScriptId");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitNotes");

                    b.HasKey("VisitId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Doctor", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.User", "DoctorUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Medicine", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.MedicineType", "MedicineMedicineType")
                        .WithMany()
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.PatientAlergy", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Patient")
                        .WithMany("PatientAlergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.PatientNote", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Patient")
                        .WithMany("PatientNotes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.Script", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Doctor", "ScriptDoctor")
                        .WithMany("DoctorScripts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FijiMed.Data.Entities.Patient", "ScriptPatient")
                        .WithMany("PatientScripts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptMedicine", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Script")
                        .WithMany("ScriptMedicines")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptNote", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Script")
                        .WithMany("ScriptNotes")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptWarning", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.Script")
                        .WithMany("ScriptWarnings")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.ScriptWarningDetail", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.ScriptWarning")
                        .WithMany("WarningDetails")
                        .HasForeignKey("ScriptWarningId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.User", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.UserRole", "UserUserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.UserPermission", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FijiMed.Data.Entities.UserRolePermission", b =>
                {
                    b.HasOne("FijiMed.Data.Entities.UserRole")
                        .WithMany("UserRolePermissions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
